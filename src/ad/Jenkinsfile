pipeline {
    agent any

    tools {
        jdk 'openjdk_21'
    }

    environment {
        SONARQUBE_SERVER = 'my-sonar'
        region = 'us-east-1'
        ECR_REPOSITORY = 'ecr-repo'
        ECR_ACCOUNT_ID = '027540914159'
        IMAGE_TAG = 'latest'
        registry = '027540914159.dkr.ecr.us-east-1.amazonaws.com'
        awsCredentialId = 'ecr-credentials'
        FULL_IMAGE_NAME = '027540914159.dkr.ecr.us-east-1.amazonaws.com/ecr-repo:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('src/ad') {
                    sh './gradlew clean build -x verifyGoogleJavaFormat'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('src/ad') {
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh './gradlew sonar -x verifyGoogleJavaFormat || true'
                    }
                }
            }
        }

        stage('Test the Code with Snyk') {
            steps {
                dir('src/ad') {
                    withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                        sh 'snyk auth $SNYK_TOKEN'
                        sh 'snyk test || true'
                        sh 'snyk monitor || true'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('src/ad') {
                    sh 'docker build -t $FULL_IMAGE_NAME .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${env.registry}", "ecr:${env.region}:${env.awsCredentialId}") {
                        docker.image(env.FULL_IMAGE_NAME).push()
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                dir('src/ad') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: ${env.awsCredentialId}]]) {
                    }
                    sh '''
                        echo "Deploying to Kubernetes"
                        aws eks update-kubeconfig --region $region --name my-eks-cluster
                        kubectl apply -f deploy.yaml
                        kubectl apply -f service.yaml
                    '''
                }
            }
        }
    }
}
